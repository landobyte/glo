#!/bin/bash

# =====[ LIB : GLO CORE ]======================================================
#
#   Written by Francois Joubert
#   Sep 2013
#
#   This is the core of glo.
#
# =============================================================================

cmdo2 'init->glocore.init'
cmdo2 'task+t->glocore.task'
cmdo2 'feature+f->glocore.feature'
cmdo2 'bug+b->glocore.bug'
cmdo2 'hotfix+fix->glocore.hotfix'
cmdo2 'st->glocore.st'
cmdo2 'bak->glocore.bak'
cmdo2 'up->glocore.up'
cmdo2 'apply->glocore.apply'
cmdo2 'end->glocore.end'
cmdo2 'ls->glocore.ls'
cmdo2 'log->glocore.log'
cmdo2 'resolved+resolve->glocore.resolved'
cmdo2 'for->glocore.for'
cmdo2 'release+rel->glocore.release'
cmdo2 'retrieve+ret+update->glocore.retrieve'

# -----[ INIT ]----------------------------------------------------------------

# [info-doc init]
# {BLU}init [-task|t] [<SystemName>]
#   Initializes the current directory as a glo repo. If <SystemName> is not specified, cwd is used.
#   It creates the .glo dir and config, a starting version tag 0.1.0, and the dev branch.
#   -t  Also creates a task branch to do system-setup.
glocore.init() {
	argo2 task+t:SetupTaskFlag %SystemName?cwd -- "$@"; $ASSIGN

	if [[ ! -d .git ]]; then
		print -i "Initializing as a git repo..."
		xgit.init
	fi

	if [[ -d .glo ]]; then
		print -i "This repo is already initialized."
		terminate ok
	fi

	print -i "Initializing glo repo..."

	mkdir .glo
	if [[ $SystemName == "cwd" ]]; then
		local wd=$(pwd)
		SystemName=${wd##*/}
	fi
	echo -e "(config:glo, version:3)::{\n\tsystem: {\n\t\tname: $SystemName\n\t}\n}" > .glo/config

	xgit.add_all
	xgit.commit 'Initialized glo'

	print -i "Tagging as version '0.1.0'..."
	xgit.tag "0.1.0"

	xgit.branch dev

	if [[ -n $(git remote) ]]; then
		print -i "Pushing to origin..."
		xgit.push master dev
	fi

	if $SetupTaskFlag; then
		print -i "Creating setup task..."
		glocore.task system-setup
	fi

	print -i "Repo initialized."
}

# -----[ TASK ]----------------------------------------------------------------

# [info-doc task]
# {BLU}task [-rename|n] [-force|f] [-updev|u] [-source|s <Source> (dev)] [-type|t <Type> (task)] <TaskName>
#   Creates a new Type/<TaskName> branch from the latest dev state.
#   Uncommitted changes may be transfered to the task branch.
#   Aliases: t
#   -n  Renames the current branch. Option -f applies if new name exists.
#   -f  Overrides existing banch.
#   -u  Updates dev from origin before the task is created.
#   -s  Specify task source as sha1 or 'this' for the current commit.
#   -t  Specifies the type of task to create: task (default), feature, bug or hotfix.
glocore.task() {
	argo2 rename+n:Rename force+f:Override updev+u:UpDev source+s=TaskSource?dev type+t=TaskType?task %TaskName -- "$@"; $ASSIGN

	if [[ -z $TaskName ]]; then
		raise usrerr_bad_name "Task Name cannot be empty!"
	fi

	TaskName=${TaskName// /-}

	if [[ ! ":task:feature:bug:" == *:$TaskType:* ]]; then
		raise usrerr_bad_type "Invalid type $TaskType"
	fi

	if $Rename; then
		if xgit.branch_exist $TaskType/$TaskName; then
			if $Override; then
				xgit.branch_delete $TaskType/$TaskName
			else
				prompt "The $TaskType $TaskName exists, would you like to override it?" yes:continue !abort:abort
				xgit.branch_delete $TaskType/$TaskName
			fi
		fi
		xgit.branch_rename $TaskType/$TaskName

		return
	fi

	if [[ $TaskSource != this ]]; then
		xgit.get_branch_type; local CurrentBranchType=$TYPE
		if [[ $CurrentBranchType == dev ]]; then
			if $UpDev; then
				print -i -n "Updating dev before creating task..."
				xgit.fetch
				xgit.ff_branch dev
			fi
			TaskSource=this
		elif xgit.is_wd_dirty; then
			xgit.transfer
		fi
	fi

	if xgit.branch_exist $TaskType/$TaskName; then
		if $Override; then
			xgit.branch_delete $TaskType/$TaskName
			print -i "Branch $TaskName overridden!"
		else
			prompt "The $TaskType $TaskName exists, would you like to check it out?" !yes:continue abort:abort

			print -i "Checking out $TaskType $TaskName..."
			xgit.checkout $TaskType/$TaskName
			xgit.transfer_apply

			return
		fi
	fi

	if [[ $TaskSource != this ]]; then
		xgit.checkout $TaskSource
	fi

	xgit.branch $TaskType/$TaskName
	print -i "Created $TaskType $TaskName."

	xgit.transfer_apply
}

# -----[ FEATURE ]-------------------------------------------------------------

# [info-doc feature]
# {BLU}feature <FeatureName>
#   Creates a new task of type 'feature' with name <FeatureName>.
#   Uncommitted changes may be transfered to the task branch.
#   Aliases: f
glocore.feature() {
	argo2 ---

	glocore.task -type feature $@
}

# -----[ BUG ]-----------------------------------------------------------------

# [info-doc bug]
# {BLU}bug <BugName>
#   Creates a new task of type 'bug' with name <BugName>.
#   Uncommitted changes may be transfered to the task branch.
#   Aliases: b
glocore.bug() {
	argo2 ---

	glocore.task -type bug $@
}

# -----[ HOTFIX ]--------------------------------------------------------------

# [info-doc hotfix]
# {BLU}hotfix <Version>
#   Creates a new hotfix/<Version(Fix+1)> branch from the state at <Version> in either master or another hotfix branch.
#   With versioning 'Maj.Min.Fix', the 'Fix' number is incremented and used as the hotfix branch name.
#   Uncommitted changes may be transfered to the hotfix branch.
#   Aliases: fix
glocore.hotfix() {
	argo2 InputVersion -- "$@"; $ASSIGN

	xgit.is_version_valid $InputVersion; CheckedVersion=$RET

	# glocore.task -type hotfix $CheckedVersion
	local BaseVersion=$TaskName
	if xgit.tag_exist $BaseVersion; then
		xgit.checkout $BaseVersion # todo: if bumped version also exist... (baseversion must be latest fix)
		xgit.version_bump $BaseVersion x.x.+; TaskName=$RET
	else
		raise usrerr_bad_baseversion "Invalid version $BaseVersion."
	fi
}

# -----[ ST ]------------------------------------------------------------------

# [info-doc st]
# {BLU}st
#   Displays modification status on main and all deps.
glocore.st() {
	argo2 -- "$@"

	local WorkingDir=$(pwd)

	gloutils.check_repo

	st_delegate() {
		local ModuleName=${1:?}

		local GitSt=$(git status --porcelain)
		if [[ -z $GitSt && $ModuleName == main ]]; then
			xgit.repo_header
			print -i "No modifications."
		elif [[ -n $GitSt ]]; then
			xgit.repo_header

			local CurrentDir=$(pwd) Line
			_IFS=$IFS; IFS=$'\n'
			for Line in $GitSt; do
				local Status=${Line:0:2}
				local File="$CurrentDir/${Line:3}"
				File="${File#$WorkingDir/}"
				print "$Status $File"
			done
			IFS=$_IFS
		fi
	}

	st_delegate main
	xgit.foreach st_delegate
}

# -----[ UP ]------------------------------------------------------------------

# [info-doc up]
# {BLU}up
#   Updates the current task branch from the latest state in dev.
#   The dev branch is updated from origin before it is merged into the task branch.
glocore.up() {
	argo2 -- "$@"

	xgit.get_branch_type; TaskType=$TYPE; TaskName=$NAME

	if [[ $TaskType == "dev" ]]; then
		raise enverr_bad_branch "You are not on a task branch, to updated the entire system, run 'glo retrieve'."
	fi

	if xgit.is_wd_dirty; then
		raise enverr_bad_wd "Uncommitted changes detected - commit first before updating."
	fi

	print -i -n "Updating repo: "
	xgit.fetch
	xgit.ff_branch dev

	xgit.merge dev "Updated $TaskType $TaskName from dev"
	if $SUCCESS && [[ $RET == *"up-to-date"* ]]; then
		print -i "Branch $TaskType $TaskName is already up to date."
	elif $SUCCESS; then
		print -i "Branch $TaskType $TaskName updated with latest changes."
	elif xgit.has_conflict; then
		raise enverr_git_merge_conflicted "Conflicts occured during update. After resolving the conflicts, run 'glo resolved'"
	else
		raise enverr_git_merge_failed "Merge failed."
	fi
}

# -----[ BAK ]-----------------------------------------------------------------

# [info-doc bak]
# {BLU}bak
#   Backs up all unmerged tasks to origin. The remote branch is prefixed with your username
#   to avoid name conflicts.
glocore.bak() {
	argo2 -- "$@"

	utils.rdc user.username; local Username=$RET
	# local Username=$(rdc landobyte username)

	bak_delegate() {
		local BranchPushList=""
		local WdDirty=false OnDev=false

		xgit.repo_header

		if xgit.is_wd_dirty untracked=true; then
			WdDirty=true
			if xgit.is_branch_type dev; then
				OnDev=true
				local Sse=$(date +"%s")
				glocore.task -force tmp-$Sse > /dev/null
			fi
			glogit.wip > /dev/null
		fi

		local UnmergedBranches=$(git branch --no-merged dev | grep -v master || true)
		UnmergedBranches=${UnmergedBranches/\*/}
		debug -2 "UnmergedBranches $UnmergedBranches"

		if [[ -z $UnmergedBranches ]]; then
			print -i "No unmerged task found."
		else
			for BranchName in $UnmergedBranches; do
				local LocalBranchName=$BranchName
				local RemoteBranchName=$Username/$BranchName

				debug -2 "LocalBranchName $LocalBranchName; RemoteBranchName $RemoteBranchName"

				if ! xgit.branch_exist origin/$RemoteBranchName || xgit.is_branch_newer $BranchName origin/$RemoteBranchName; then
					BranchPushList+="$LocalBranchName:$RemoteBranchName "
				fi
			done

			if [[ -z $BranchPushList ]]; then
				print -i "All tasks are backed up."
			else
				print -i "Backing up..."
				if xgit.push force=true $BranchPushList; then
					print -c s "Success."
				fi
			fi
		fi

		if $WdDirty; then
			glogit.unwip > /dev/null
			if $OnDev; then
				glogit.co dev > /dev/null
			fi
		fi

	}

	bak_delegate main
	xgit.foreach bak_delegate
}

# -----[ APPLY ]---------------------------------------------------------------

# todo: apply a hotfix to some other version specified
# argo2 version+v=ApplyToVersion "$@"

# [info-doc apply]
# {BLU}apply [-stay|s] [-delete|d]
#   The current task branch is merged into dev. All changes must be commited.
#   -s  Stay on the current task branch.
#   -d  Deletes the task branch after it is merged into dev. Ignored with -s
glocore.apply() {
	argo2 stay+s:StayOnTask delete+d:DeleteBranch -- "$@"; $ASSIGN

	xgit.get_branch_type; TaskType=$TYPE; TaskName=$NAME

	if [[ $TaskType == "dev" ]]; then
		raise enverr_bad_branch "This is not a task branch - nothing to apply."
	fi

	if xgit.is_wd_dirty; then
		prompt "Uncommitted changes detected - would you like to stash it?" yes:continue !abort:abort
		xgit.stash
	fi

	xgit.checkout dev

	print -i -n "Updating repo: "
	xgit.fetch
	xgit.ff_branch dev

	local Partial=""
	if $StayOnTask; then
		Partial="partial "
	fi

	case $TaskType in
		feature) TaskApplyMessage="Added ${Partial}feature $TaskName" ;;
		bug)     TaskApplyMessage="Fixed ${Partial}bug $TaskName" ;;
		hotfix)  TaskApplyMessage="Applied hotfix $TaskName" ;;
		*)       TaskApplyMessage="Completed ${Partial}task $TaskName" ;;
	esac

	xgit.merge $TaskType/$TaskName "$TaskApplyMessage"
	if $SUCCESS; then
		print -i "Branch $TaskType $TaskName applied to dev."
	elif xgit.has_conflict; then
		print -e "Conflicts occured during apply!"
		prompt "Would you like to continue to resolve the conflicts or abort the merge?" yes:false !abort-merge:true; local DoAbortMerge=$RET
		if $DoAbortMerge; then
			xgit.merge_abort
			print -i "Merge aborted. Try to update your task from dev and resolve it from there."
		fi
		terminate enverr_git_merge_conflicted
	else
		raise enverr_git_merge_failed
	fi

	utils.rdc user.username; local Username=$RET
	# local Username=$(rdc landobyte username)
	local DeleteBackupBranch
	if xgit.branch_exist origin/$Username/$TaskType/$TaskName; then
		# If a backup branch exist, remove it - because it is now merged into dev
		DeleteBackupBranch=":$Username/$TaskType/$TaskName"
	fi

	xgit.push dev $DeleteBackupBranch

	if $StayOnTask; then
		xgit.checkout $TaskType/$TaskName
	elif $DeleteBranch; then
		xgit.branch_delete $TaskType/$TaskName
		print -i "Deleted $TaskType branch."
	fi
}

# [info-doc end]
# {BLU}end
#   Synonym for 'glo apply -delete'
glocore.end() {
	argo2 -- "$@"

	glocore.apply -delete
}

# -----[ LS ]------------------------------------------------------------------

# [info-doc ls]
# {BLU}ls [-all|a]
#   Lists unmerged tasks.
#   Note: New task branches needs at least one commit to be labeled as unmerged.
#   -a  Displays all tasks.
glocore.ls() {
	argo2 all+a:All -- "$@"; $ASSIGN

	ls_delegate() {
		local ModuleName=${1:?}

		local Tasks UnmergedTasks
		if $All; then
			Tasks=$(git branch | grep -v master | grep -v dev || true)
			UnmergedTasks=$(git branch --no-merged dev | grep -v master || true)
			UnmergedTasks=${UnmergedTasks//$'\n'/:}
			UnmergedTasks=:${UnmergedTasks// }:
		else
			Tasks=$(git branch --no-merged dev | grep -v master || true)
		fi

		if [[ -n $Tasks ]]; then
			xgit.repo_header
			Tasks=${Tasks/\* /->}
			local Task
			for Task in $Tasks; do
				local Margin
				if [[ $Task != -\>* ]]; then
					Margin="  "
				fi

				if [[ "$UnmergedTasks" == *:$Task:* ]]; then
					print -c red "$Margin$Task"
				else
					print "$Margin$Task"
				fi
			done
		elif [[ $ModuleName == main ]]; then
			xgit.repo_header
			print -i "No unmerged tasks."
		fi
	}

	ls_delegate main
	xgit.foreach ls_delegate
}

# -----[ LOG ]-----------------------------------------------------------------

# [info-doc log]
# {BLU}log [<StopVersion>]
#   Displays a list of tasks applied to dev.
glocore.log() {
	argo2 ---

	CurrentVersion="Dev"
	NodeSha=$(git rev-parse dev)

	PreviousVersion=$(git describe --tags --abbrev=0 master)
	StopSha=$(git rev-parse "$PreviousVersion^2" || true)

	StopVersion=${1:-$PreviousVersion}
	xgit.is_version_valid $StopVersion; StopVersion=$RET

	while [[ $CurrentVersion != $StopVersion ]]; do
		Header="-----[ $CurrentVersion ]------------------------------------------------------"
		print ${Header:0:60}
		while [[ $NodeSha != $StopSha ]]; do
			CommitText=$(git show --no-patch --format="%s - %an" $NodeSha)
			print "$CommitText"

			if ! NodeSha=$(git rev-parse $NodeSha^); then
				return
			fi
		done
		CurrentVersion=$PreviousVersion
		PreviousVersion=$(git describe --tags --abbrev=0 $PreviousVersion^)
		StopSha=$(git rev-parse "$PreviousVersion^2")
	done
}

# -----[ FOR ]------------------------------------------------------------------

# [info-doc for]
# {BLU}for (<SubRepoList> | all) -- <Command(s)>
#   Runs <Command> on <SubRepoList>.
glocore.for() {
	argo2 ---

	local RepoList=":" Delegate
	while [[ -n $1 && $1 != -do && $1 != -- ]]; do
		RepoList+="$1:"; shift
	done; shift
	Command="$@"

	for_delegate() {
		local ModuleName=${1:?}

		# dirty tag to list all dirty wd
		if [[ $RepoList == *:$ModuleName:* || $RepoList == *:all:* ]]; then
			xgit.repo_header
			export IO_PrintIndent="  |"
			$Command
			IO_PrintIndent=""
		fi
	}

	xgit.foreach for_delegate
}

# -----[ RELEASE ]-------------------------------------------------------------

# [info-doc release]
# {BLU}release [-fix|x | -major|m]
#   Merges the current dev state into master and tags it with the next version. All changes must be commited.
#   With versioning 'Maj.Min.Fix', the 'Min' number is auto incremented.
#   Aliases: rel
#   -x  The 'Fix' number will be incremented instead.
#   -m  The 'Maj' number will be incremented instead and 'Min' and 'Fix' reset to zero.
glocore.release() {
	argo2 fix+x:FixFlag major+m:MajorFlag -- "$@"; $ASSIGN

	if xgit.is_wd_dirty; then
		raise enverr_bad_wd "Uncommitted changes detected - cannot create release."
	fi

	xgit.checkout master

	print -i -n "Updating repo: "
	xgit.fetch
	xgit.ff_branch master
	xgit.ff_branch dev

	if xgit.is_branch_newer master dev; then
		prompt "No commits were made since the last release, would you like to rebuild the current release?" yes:continue !abort:abort
		glo package

		terminate ok
	fi

	xgit.version_current; Version=$RET
	if $MajorFlag; then
		xgit.version_bump $Version +.0.0; NewVersion=$RET
	elif $FixFlag; then
		xgit.version_bump $Version x.x.+; NewVersion=$RET
	else
		xgit.version_bump $Version x.+.0; NewVersion=$RET
	fi

	# todo: release merge state - for resolved
	xgit.merge commit=false dev "Released $NewVersion"
	if $SUCCESS; then
		print -i "Branch dev released to master."
	elif xgit.has_conflict; then
		raise enverr_git_merge_conflicted "Oh dear! Conflicts on master... what did you do??"
	else
		raise enverr_git_merge_failed "Merge failed."
	fi

	print -i "Creating snapshot of deps..."
	gloconfig.deps.snapshot

	git commit --no-edit > /dev/null

	xgit.tag $NewVersion
	print -i "Version $NewVersion created."

	xgit.push master

	xgit.checkout dev
}

# -----[ RESOLVED ]------------------------------------------------------------

# [info-doc resolved]
# {BLU}resolved
#   Adds and commits files that are in conflict state after a merge.
glocore.resolved() {
	argo2 -- "$@"

	local MergeAction

	gloutils.check_repo

	# todo: check if resolved is applicable
	xgit.add $(git diff --name-only --diff-filter=U)

	xgit.conflict_source clear=true; MergeAction=$RET
	if [[ $MergeAction != transfer ]]; then
		if [[ $MergeAction == dev_commit ]]; then
			utils.get_state commit; local Message="$RET"
			utils.get_state commit_flags; local Flags=$RET
			local IndexOnlyFlag=false
			if [[ $Flags == *":index:"* ]]; then
				IndexOnlyFlag=true
			fi
			if [[ $Flags == *":amend:"* ]]; then
				xgit.commit_amend index=$IndexOnlyFlag "$Message"
			else
				xgit.commit index=$IndexOnlyFlag "$Message"
			fi
		else
			git commit --no-edit
		fi

		xgit.get_branch_type; TaskType=$TYPE
		if [[ $TaskType == "dev" ]]; then
			xgit.push dev
		fi
	fi
}

# -----[ RETRIEVE ]------------------------------------------------------------

# [info-doc retrieve]
# {BLU}retrieve
#   Updates master and dev from origin. If deps.config exists, deps is also updated.
glocore.retrieve() {
	argo2 -- "$@"

	gloutils.check_repo

	xgit.get_branch_type; TaskType=$TYPE; TaskName=$NAME

	# if [[ $TaskType == master ]]; then
	# 	raise usrerr_invalid_command "Please update from dev or a task."
	# fi

	if xgit.is_wd_dirty; then
		prompt "Uncommitted changes detected - would you like to stash?" yes:continue !abort:abort
		xgit.stash
		print -i "Your work is stashed, run 'git stash pop' to retrieve it afterwards."
	fi

	print -i -n "Updating repo: "
	xgit.fetch
	xgit.ff_branch master
	xgit.ff_branch dev

	if xgit.has_conflict; then
		raise enverr_git_merge_conflicted "Your dev branch diverged from dev on origin. Please fix the conflicts and run 'glo resolved', then 'glo retrieve' again."
	fi

	prompt "Whould you like to retrieve the deps?" !yes:true no:false; local Response=$RET
	if $Response; then
		gloconfig.deps.up
	fi

	if [[ $TaskType != "dev" ]]; then
		xgit.checkout $TaskType/$TaskName
	fi

	print -i "System updated."
}

# =============================================================================
