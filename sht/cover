#!/usr/bin/env bash

# =====[ BASH COVER APP ]======================================================
#
#	Written by Francois Joubert
#	Jul 2014
#
# =============================================================================

source ${0%/*}/../libs/stdlib
import utils

# -----[ RUN ]-----------------------------------------------------------------

cover.run() {
	argo2 SourceFile %TraceFiles -- "$@"; $ASSIGN

	local SourceFileName=${SourceFile##*/}

	local -a LineExecuted
	local -i LineNr LineNr_t1
	local TraceFile
	for TraceFile in $TraceFiles; do
		while read Line; do
			if [[ $Line == */$SourceFileName:* ]]; then
				Line=${Line#*:}
				LineNr=${Line%%::*}
				if [[ $LineNr == $LineNr_t1 ]]; then
					continue
				fi
				LineNr_t1=$LineNr
				let LineExecuted[$LineNr]+=1
			fi
		done < $TraceFile
	done

	# echo ${!LineExecuted[@]}
	# echo ${LineExecuted[@]}

	LineNr=0
	local Source=$(< $SourceFile)
	local -i LineCoverCount CoveredLines=0 NotCoveredLines=0

	local CurrentFunction
	local -i FunctionLevel=0 FunctionCoveredLines=0 FunctionNotCoveredLines=0
	declare -a FunctionCover

	local -i TotalExecutableLines CoverPercentage

	local Color Padding
	while read Line; do
		LineNr+=1

		LineCoverCount=${LineExecuted[$LineNr]}
		Line=${Line//__tab__/    }
		Line=${Line//\\n}

		print -c gry -n "$(printf "% 4d" $LineNr):"
		if [[ $LineCoverCount != 0 ]]; then
			CoveredLines+=1
			FunctionCoveredLines+=1
			print -n "$(printf "%3d" $LineCoverCount)|"
			print -c grn "$Line"
		elif cover.is_executeble "$Line"; then
			NotCoveredLines+=1
			FunctionNotCoveredLines+=1
			print -n "  -|"
			print -c red "$Line"
		else
			print -n "   |"
			print -c gry "$Line"
		fi

		if [[ -z $CurrentFunction && "$Line" =~ ^\ *[A-Za-z0-9_.]*\(\).*$ ]]; then
			CurrentFunction=${Line%%(*}
			FunctionLevel=0
			FunctionCoveredLines=0
			FunctionNotCoveredLines=0
		elif [[ -n $CurrentFunction ]]; then
			if [[ "$Line" =~ ^\ *[A-Za-z0-9_.]*\(\).*$ ]]; then
				FunctionLevel+=1
			elif [[ "$Line" =~ ^\ *}\ *$ && FunctionLevel -gt 0 ]]; then
				FunctionLevel+=-1
			elif [[ "$Line" =~ ^\ *}\ *$ ]]; then
				TotalExecutableLines=$FunctionCoveredLines+$FunctionNotCoveredLines
				CoverPercentage=$FunctionCoveredLines*100/$TotalExecutableLines
				FunctionCover+=("$CurrentFunction: $CoverPercentage%")

				CurrentFunction=""
				FunctionCoveredLines=0
				FunctionNotCoveredLines=0
			fi
		fi

		# if [[ $LineNr -gt 50 ]]; then
		# 	break
		# fi
	done <<< "${Source//$'\t'/__tab__}"

	print "=================================================================================================================================="
	local FuncCover
	for FuncCover in "${FunctionCover[@]}"; do
		print -i "$FuncCover"
	done

	TotalExecutableLines=$CoveredLines+$NotCoveredLines
	CoverPercentage=$CoveredLines*100/$TotalExecutableLines
	print
	print -i "Total Cover: $CoverPercentage%"
}

cover.is_executeble() {
	if [[ -z $1 ]]; then
		return 1
	fi

	if 	[[ "$1" =~ ^\ *\#.*$ ]] ||
		[[ "$1" =~ ^\ *[A-Za-z0-9_.]*\(\).*$ ]] ||
		[[ "$1" =~ ^\ *}\ *$ ]] ||
		[[ "$1" =~ ^\ *fi\ *$ ]] ||
		[[ "$1" =~ ^\ *else\ *$ ]] ||
		[[ "$1" =~ ^\ *esac\ *$ ]] ||
		[[ "$1" =~ ^\ *done\ *$ ]] ||
		[[ "$1" =~ ^\ *import.*$ ]] ||
		[[ "$1" =~ ^\ *cmdo2.*$ ]] ||
		[[ "$1" =~ ^\ *source.*$ ]] ||
		[[ "$1" =~ ^\ *io.activate_tracing.*$ ]]
	then
		return 1
	# else
	# 	echo ">$1<"
	fi
}

# -----[ MAIN ]----------------------------------------------------------------

cover.run "$@"

terminate ok

# =============================================================================
