#!/bin/bash

# =====[ LIB : GLO GIT ]=======================================================
#
#	Written by Francois Joubert
#	Oct 2013
#
#	This lib contains git aliasses and simple git commands.
#
# =============================================================================

cmdo2 'add->glogit.add'
cmdo2 'commit+ci->glogit.commit'
cmdo2 'cii->glogit.cii'
cmdo2 'cia->glogit.cia'
cmdo2 'co->glogit.co'
cmdo2 'wip->glogit.wip'
cmdo2 'unwip->glogit.unwip'
cmdo2 'diff->glogit.diff'
cmdo2 'reset->glogit.reset'

# -----[ GIT COMMANDS ]--------------------------------------------------------

# [info-doc add]
# {BLU}add [-all|a] <FileList>
#   Synonym for 'git add <FileList>'.
#   -a	Adds all untracked files to the index.
glogit.add() {
	argo2 all+a:AllFlag %Files -- "$@"; $ASSIGN

	xgit.add all=$AllFlag $Files
}

# [info-doc commit]
# {BLU}commit [-index|i] [-amend|a] [-dirty|d] <Message>
#   Commits modifications to repo.
#   -i	Only commits the index in git
#   -a	Amends the last commit with the current modifications, if <Message> is empty it is left unmodified
#   -d	Allows a 'dirty' commit directly to dev - use SPARINGLY!
glogit.commit() {
	argo2 index+i:IndexFlag amend+a:AmendFlag dirty+d:DirtyFlag %Message -- "$@"; $ASSIGN

	if [[ -z $Message ]] && ! $AmendFlag; then
		raise usrerr_bad_message "Message may only be empty with '-amend'."
	fi

	gloutils.check_repo

	xgit.get_branch_type; local TaskType=$TYPE

	if [[ $TaskType == master ]]; then
		raise usrerr_commit_not_allowed "Commits may not be made on master."
	fi

	Message="$(echo ${Message:0:1} | tr '[:lower:]' '[:upper:]')${Message:1}"
	if [[ "$Message" == *. ]]; then
		Message="${Message%.}"
	fi

	if [[ $TaskType == dev ]]; then
		if $DirtyFlag; then
			Message="Dev commit: $Message"
		else
			raise usrerr_commit_not_recommended "Use the '-dirty' flag to commit directly to dev."
		fi
	fi

	if xgit.has_untracked && local UntrackedFiles=$RET; then
		print -w "New files have not been added yet.\n- ${UntrackedFiles//$'\n'/$'\n'- }"
		prompt "Would you like to add them?" !yes:true no:false abort:abort; local Response=$RET
		if $Response; then
			xgit.add_all
		fi
	fi

	if [[ $TaskType == dev ]]; then
		print -i -n "Updating repo: "
		xgit.fetch; local Fetched=$RET
		if $Fetched; then
			xgit.stash
			xgit.ff_branch dev

			utils.set_state commit "$Message"
			local FlagsString=":"
			if $IndexFlag; then FlagsString+="index:"; fi
			if $AmendFlag; then FlagsString+="amend:"; fi
			utils.set_state commit_flags $FlagsString

			xgit.transfer_apply -m dev_commit
		fi
	fi

	if $AmendFlag; then
		xgit.commit_amend index=$IndexFlag "$Message"
	else
		xgit.commit index=$IndexFlag "$Message"
	fi

	if [[ $TaskType == dev ]]; then
		xgit.push dev
	fi
}

# [info-doc cii]
# {BLU}cii <Message>
#   Synonym for 'glo commit -index <Message>'.
glogit.cii() {
	argo2 %Message -- "$@"; $ASSIGN

	glogit.commit -index "$Message"
}

# [info-doc cia]
# {BLU}cia [<Message>]
#   Synonym for 'glo commit -amend <Message>'.
glogit.cia() {
	argo2 %Message -- "$@"; $ASSIGN

	glogit.commit -amend "$Message"
}

# [info-doc co]
# {BLU}co <Args>
#   Synonym for 'git checkout <Args>'.
glogit.co() {
	argo2 ---

	local Checkout
	if Checkout=$(git checkout "$@" 2>&1); then
		if [[ $Checkout == *Switched* ]]; then
			print -i "Switched to $@"
		fi
	elif xgit.is_wd_dirty; then
		raise syserr_checkout_failed "Commit changes before switching."
	else
		Checkout=${Checkout//$'\n'/$'\n'   }
		print "   $Checkout"
		raise syserr_checkout_failed
	fi
}

# [info-doc wip]
# {BLU}wip
#   Synonym for 'git commit -am WIP'.
glogit.wip() {
	argo2 -- "$@"

	xgit.add_all
	local Date=$(date +"%y-%m-%d %T")
	git commit -am "WIP: $Date"
}

# [info-doc unwip]
# {BLU}unwip
#   Synonym for 'git reset HEAD^'.
glogit.unwip() {
	argo2 -- "$@"

	LastMsg=$(git show --no-patch --format="%s" HEAD)
	print $LastMsg
	if [[ $LastMsg == "WIP"* ]]; then
		git reset --mixed HEAD^
	else
		raise enverr_no_wip "No WIP commit on this branch."
	fi
}

# [info-doc reset]
# {BLU}reset <Args>
#   Synonym for 'git reset --hard <Args>'.
glogit.reset() {
	argo2 %Files -- "$@"; $ASSIGN

	HardFlag=false
	if [[ -z $Files ]]; then
		HardFlag=true
		Files="the working dir"
	fi

	prompt "Are you sure you would like to reset $Files to match the head commit?" yes:continue !abort:abort

	if $HardFlag; then
		git reset --hard HEAD > /dev/null
		print -i "Working directory reset to latest commit."
	else
		git checkout $Files > /dev/null
		print -i "Files [$Files] reset to latest commit."
	fi
}

# [info-doc diff]
# {BLU}diff <Args>
#   Synonym for 'git diff <Args>'.
glogit.diff() {
	argo2 status+s:StatusFlag index+i:IndexFlag mode+m=DiffMode?${GLO_DiffMode:-word} %Args -- "$@"; $ASSIGN

	if [[ -z $Args ]]; then
		xgit.diff status=$StatusFlag index=$IndexFlag mode=$DiffMode
	else
		local IsArg=false File
		for File in $Args; do
			if [[ ! -f $File ]]; then
				IsArg=true
				break
			fi

			local Path=${File%/*}
			if [[ ! -d $Path ]]; then
				IsArg=true
				break
			fi

			cd $Path
			local FileName=${File##*/}
			xgit.diff status=$StatusFlag index=$IndexFlag mode=$DiffMode $FileName
			cd - > /dev/null
		done

		if $IsArg; then
			xgit.diff status=$StatusFlag index=$IndexFlag mode=$DiffMode $Args
		fi
	fi
}

# =============================================================================
